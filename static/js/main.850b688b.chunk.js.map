{"version":3,"sources":["scripts/Roll.js","components/UserInput.js","components/CustomButtonForm.js","components/Display.js","index.js"],"names":["Roll","diceSize","numDice","postRollAdd","numRolls","basicRoll","Math","floor","random","basicRoll_Repeat","num","resultDetail","undefined","result","this","nextRoll","total","fullRoll","finalResult","slice","fullRoll_Repeat","fullResult","roll","toString","innerStr","initDiceSize","parseInt","initNumDice","initPostRollAdd","initNumRolls","Number","isInteger","RollList","props","rolls","map","idx","RollButton","key","text","onClick","className","UserInput","FormRow","htmlFor","inputID","labelText","id","type","name","value","onChange","event","handleChange","CustomButtonForm","state","newRoll","Object","assign","target","setState","onSubmit","handleSubmit","readOnly","closeModal","React","Component","ResultHistoryDisplay","historyList","rollHistory","item","ResultDisplay","contextClass","AddButton","Display","currentResult","addButtonOnClick","App","basicDice","createBasicDice","customButtons","modalIsOpen","scrollHistoryDown","rollsToAdd","forEach","concat","console","log","newHistory","historyDisplay","document","getElementById","scrollTop","scrollHeight","preventDefault","forms","elements","updatedRolls","isOpen","onRequestClose","onClickDice","showAddButtonModal","ReactDOM","render"],"mappings":"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","file":"static/js/main.850b688b.chunk.js","sourcesContent":["class Roll{\r\n    constructor(diceSize, numDice, postRollAdd, numRolls){\r\n        const initDiceSize = parseInt(diceSize);\r\n        const initNumDice = parseInt(numDice);\r\n        const initPostRollAdd = parseInt(postRollAdd);\r\n        const initNumRolls = parseInt(numRolls);\r\n\r\n        if(diceSize === undefined || !Number.isInteger(initDiceSize)){\r\n            this.diceSize = 20;\r\n        } else{\r\n            this.diceSize = parseInt(initDiceSize);\r\n        }\r\n        \r\n        if(numDice === undefined || !Number.isInteger(initNumDice)){\r\n            this.numDice = 1;\r\n        } else{\r\n            this.numDice = initNumDice;\r\n        }\r\n        \r\n        if(postRollAdd === undefined || !Number.isInteger(initPostRollAdd)){\r\n            this.postRollAdd = 0;\r\n        } else{\r\n            this.postRollAdd = initPostRollAdd;\r\n        }\r\n\r\n        if(numRolls === undefined || !Number.isInteger(initNumRolls)){\r\n            this.numRolls = 1;\r\n        } else{\r\n            this.numRolls = initNumRolls;\r\n        }\r\n        \r\n    }\r\n\r\n    basicRoll = () => Math.floor(Math.random() * Math.floor(this.diceSize)+1);\r\n\r\n    //TODO - just for fun, figure out how to use functional programming\r\n    //to refactor into a generic \"repeat roll\" function that you can pass basic or full into\r\n    basicRoll_Repeat  = function(num, resultDetail){\r\n        if(resultDetail === undefined){\r\n            resultDetail = \"(\";\r\n        }\r\n\r\n        let result = this.basicRoll();\r\n        resultDetail += `${result}, `;\r\n        num--;\r\n\r\n\r\n        if(num > 0){\r\n            const nextRoll = this.basicRoll_Repeat(num, resultDetail);\r\n            return {total: result + nextRoll['total'], resultDetail: nextRoll['resultDetail']};;\r\n        }\r\n\r\n        return {total: result, resultDetail: resultDetail};;\r\n    }\r\n\r\n    fullRoll  = function(){\r\n        let finalResult = this.basicRoll_Repeat(this.numDice);\r\n        finalResult['total'] += this.postRollAdd;\r\n        finalResult['resultDetail'] = finalResult['resultDetail'].slice(0, -2) + `) + ${this.postRollAdd}`;\r\n        return finalResult;\r\n    }\r\n\r\n    fullRoll_Repeat  = function(num, resultDetail){\r\n        if(resultDetail === undefined){\r\n            resultDetail = \"(\";\r\n        }\r\n        let fullResult = this.fullRoll();\r\n        let result = fullResult['total'];\r\n        resultDetail += `${fullResult['resultDetail']}, `;\r\n        num--;\r\n        \r\n        if(num > 0){\r\n            const nextRoll = this.fullRoll_Repeat(num, resultDetail);\r\n            return {total: result + nextRoll['total'], resultDetail: nextRoll['resultDetail']};\r\n        }\r\n\r\n        return {total: result, resultDetail: resultDetail};\r\n    }\r\n\r\n    roll  = function(){\r\n        let finalResult = this.fullRoll_Repeat(this.numRolls);\r\n        finalResult['resultDetail'] = finalResult['resultDetail'].slice(0, -2) + \")\";\r\n        return finalResult;\r\n    }\r\n\r\n    toString  = function(){\r\n        const numRollsStr = this.numRolls <= 1 ? '' : (\"roll \" + this.numRolls + \" times\");\r\n\r\n        if(this.numDice === 1 && this.postRollAdd === 0\r\n            && this.numRolls === 1){\r\n                return `d${this.diceSize}`;\r\n        } else{\r\n            let innerStr = `${this.numDice}d${this.diceSize}`;\r\n            return `${this.numRolls}[${innerStr} + ${this.postRollAdd}]`;\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport default Roll;","import React from 'react';\r\nimport Roll from '../scripts/Roll'\r\n\r\nfunction UserInput(props){\r\n    return(\r\n            <div className='input-container'>\r\n                <RollList rolls={props.rolls} \r\n                    onClick={(roll) => props.onClick(roll)} />\r\n            </div>\r\n        );\r\n}\r\n\r\nfunction RollList(props){\r\n    const diceButtons = props.rolls.map((roll, idx) => {\r\n        return <RollButton \r\n                key={`roller-${roll.toString()}__${idx}`}\r\n                text={roll.toString()}\r\n                onClick={() => props.onClick(roll)}/>\r\n    });\r\n\r\n    return diceButtons;\r\n}\r\n\r\nfunction RollButton(props){\r\n    return(\r\n        <button className='rollBtn' \r\n            onClick={props.onClick}>{props.text}</button>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default UserInput;","import React from 'react';\r\nimport Roll from '../scripts/Roll';\r\n\r\nclass CustomButtonForm extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            roll: new Roll()\r\n        };\r\n    }\r\n\r\n    handleChange(event){\r\n        const newRoll = Object.assign({}, this.state.roll, {[event.target.name]: event.target.value});\r\n\r\n        this.setState({\r\n            roll: newRoll\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='modal-content'>\r\n                <div className='modal-input-container'>\r\n                    <div className='form-heading'>\r\n                        <h3>Add a custom Dice</h3>\r\n                        <p>Please enter custom dice size</p>\r\n                        <small>(Number values only)</small>\r\n                    </div>\r\n                    <form className='custom-btn-form' onSubmit={this.props.handleSubmit}>\r\n                        {/* dice size */}\r\n                        <FormRow inputID='diceSize'\r\n                            labelText='Dice Size (dX)' \r\n                            value={this.state.roll.diceSize}\r\n                            handleChange={(event) => this.handleChange(event)} />\r\n                        {/* number of dice */}\r\n                        <FormRow inputID='numDice'\r\n                            labelText='Number of Dice' \r\n                            value={this.state.roll.numDice}\r\n                            handleChange={(event) => this.handleChange(event)} />\r\n                        {/* modifier to roll result */}\r\n                        <FormRow inputID='postRollAdd'\r\n                            labelText='Modifier to roll result' \r\n                            value={this.state.roll.postRollAdd}\r\n                            handleChange={(event) => this.handleChange(event)} />\r\n                        {/* number of rolls */}\r\n                        <FormRow inputID='numRolls'\r\n                            labelText='How many times to perform Roll?' \r\n                            value={this.state.roll.numRolls}\r\n                            handleChange={(event) => this.handleChange(event)} />\r\n                        <div className='input-row'>\r\n                            <label htmlFor=''>Your Custom Roll:</label>\r\n                            <input type='text' \r\n                                value={this.state.roll.toString()}\r\n                                readOnly />\r\n                        </div>\r\n                        <div className='input-row'>\r\n                            <input id='input-submit' className='input-submit modal-btn' type='submit' name='input-submit' />\r\n                        </div>\r\n                    </form>\r\n                    <button className='modal-close-btn modal-btn' onClick={() => this.props.closeModal()}>Close</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction FormRow(props){\r\n    return(\r\n        <div className='input-row'>\r\n            <label htmlFor={props.inputID} className={`label-${props.inputID} input-label`}>\r\n                {props.labelText}\r\n            </label>\r\n            <input id={`input-${props.inputID}`} className='input-text' \r\n            type='text' name={props.inputID}\r\n            value={props.value} \r\n            onChange={(event) => props.handleChange(event)} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomButtonForm;","import React from 'react';\r\n\r\nfunction Display(props){\r\n    return(\r\n        <div className='display-container'>\r\n            <ResultDisplay result={props.currentResult}\r\n                contextClass='current-result' />\r\n            <div className='details-view'>\r\n                <ResultHistoryDisplay rollHistory={props.rollHistory}/>\r\n                <AddButton onClick={props.addButtonOnClick}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ResultHistoryDisplay(props){\r\n    let idx = -1;\r\n    const historyList = props.rollHistory.map((item) => {\r\n        idx++;\r\n        return (<li key={'history-' + idx}>\r\n            <ResultDisplay \r\n                result={item}\r\n                contextClass='historical-result' />\r\n            </li>);\r\n    });\r\n\r\n    return(\r\n        <div className='result-history'>\r\n            <ul id='result-history-list' className='result-history-list'>\r\n                {historyList}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ResultDisplay(props){\r\n    return(\r\n        <div className={'result-wrapper ' + props.contextClass}>\r\n            <h4 className='result-details'>{props.result.roll}</h4>\r\n            <p className='result-display'>{props.result.result['total']}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction AddButton(props){\r\n    return(\r\n        <button className='addBtn' onClick={props.onClick}>Add Custom Roll</button>\r\n    );\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport UserInput from './components/UserInput';\r\nimport CustomButtonForm from './components/CustomButtonForm';\r\nimport Display from './components/Display'\r\nimport Modal from 'react-modal';\r\nimport Roll from './scripts/Roll';\r\n\r\nimport '../node_modules/normalize.css/normalize.css';\r\nimport './css/index.css';\r\n\r\nclass App extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        const basicDice = this.createBasicDice();\r\n        this.state = {\r\n            currentResult: {roll: '', result: 0},\r\n            rolls: basicDice,\r\n            rollHistory: [],\r\n            customButtons: [],\r\n            modalIsOpen: false\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.scrollHistoryDown();\r\n    }\r\n\r\n    createBasicDice(){\r\n        const basicDice = [2,4,6,8,10,12,20,100];\r\n        let rollsToAdd = [];\r\n\r\n        basicDice.forEach(item => {\r\n            const newRoll = new Roll(item);\r\n            rollsToAdd = rollsToAdd.concat(newRoll);\r\n        });\r\n\r\n        return rollsToAdd;\r\n    }\r\n\r\n    onClickDice(roll){\r\n        const newRoll = {roll:  roll.toString(), result: roll.roll()};\r\n        console.log(newRoll);\r\n        const newHistory = this.state.rollHistory.concat(newRoll)\r\n        this.setState({\r\n            currentResult: newRoll,\r\n            rollHistory: newHistory\r\n        });\r\n    }\r\n\r\n    scrollHistoryDown(){\r\n        let historyDisplay = document.getElementById('result-history-list');\r\n\r\n        historyDisplay.scrollTop = historyDisplay.scrollHeight;\r\n    }\r\n\r\n    showAddButtonModal(){\r\n        this.setState({\r\n            modalIsOpen: true\r\n        })\r\n    }\r\n\r\n    closeModal(){\r\n        this.setState({\r\n            modalIsOpen: false\r\n        });\r\n    }\r\n\r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n        const forms = event.target.elements;\r\n        const newRoll = new Roll(forms[0].value, forms[1].value, forms[2].value, forms[3].value);\r\n        const updatedRolls = this.state.rolls.concat(newRoll);\r\n        this.setState({\r\n            rolls: updatedRolls\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className='container'>\r\n                <Modal \r\n                    isOpen={this.state.modalIsOpen}\r\n                    onRequestClose={() => this.closeModal()}\r\n                >\r\n                    <CustomButtonForm closeModal={() => this.closeModal()}\r\n                        handleSubmit={(event) => this.handleSubmit(event)}/>\r\n                </Modal>\r\n                <UserInput onClick={(roll) => this.onClickDice(roll)} \r\n                    rolls={this.state.rolls} />\r\n                <Display currentResult={this.state.currentResult} \r\n                    rollHistory={this.state.rollHistory}\r\n                    addButtonOnClick={() => this.showAddButtonModal()} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n/*****************************************/\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}