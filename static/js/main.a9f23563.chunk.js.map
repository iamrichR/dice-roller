{"version":3,"sources":["components/UserInput.js","components/CustomButtonForm.js","components/Display.js","index.js"],"names":["DiceList","props","dice","map","die","idx","DiceButton","key","size","onClick","className","UserInput","this","diceButtons","React","Component","CustomButtonForm","state","rollDetailValue","event","setState","target","value","onSubmit","handleSubmit","for","id","type","name","onChange","handleChange","closeModal","ResultHistoryDisplay","historyList","rollHistory","item","ResultDisplay","result","contextClass","roll","AddButton","Display","currentResult","addButtonOnClick","App","n","Math","floor","random","customButtons","modalIsOpen","scrollHistoryDown","newRoll","newHistory","concat","historyDisplay","document","getElementById","scrollTop","scrollHeight","newValue","parseInt","elements","preventDefault","Number","isInteger","newCustomButtons","basicDice","isOpen","onRequestClose","onClickDice","length","showAddButtonModal","ReactDOM","render"],"mappings":"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","file":"static/js/main.a9f23563.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass UserInput extends React.Component{\r\n    render() {\r\n        return(\r\n            <div className='input-container'>\r\n                <DiceList dice={this.props.diceButtons} \r\n                    onClick={(size) => this.props.onClick(size)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction DiceList(props){\r\n    const diceButtons = props.dice.map((die, idx) => {\r\n        return <DiceButton \r\n                key={`die-d${die}__${idx}`}\r\n                size={die} \r\n                onClick={() => props.onClick(die)}/>\r\n    });\r\n\r\n    return diceButtons;\r\n}\r\n\r\nfunction DiceButton(props){\r\n    return(\r\n    <button className='diceBtn' \r\n        onClick={props.onClick}>d{props.size}</button>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default UserInput;","import React from 'react';\r\n\r\nclass CustomButtonForm extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            rollDetailValue: 3\r\n        };\r\n    }\r\n\r\n    handleChange(event){\r\n        this.setState({\r\n            rollDetailValue: event.target.value\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='modal-content'>\r\n                <div className='modal-input-container'>\r\n                    <div className='form-heading'>\r\n                        <h3>Add a custom Dice</h3>\r\n                        <p>Please enter custom dice size</p>\r\n                    </div>\r\n                    <form className='custom-btn-form' onSubmit={this.props.handleSubmit}>\r\n                        <div className='input-row'>\r\n                            <label for='input-roll-details' className='label-roll-details'>Custom Roll</label>\r\n                            <input id='input-roll-details' className='input-text' \r\n                            type='text' name='input-roll-details'\r\n                            value={this.state.rollDetailValue} \r\n                            onChange={(event) => this.handleChange(event)} />\r\n                        </div>\r\n                        <div className='input-row'>\r\n                            <input id='input-submit' className='input-submit modal-btn' type='submit' name='input-submit' />\r\n                        </div>\r\n                    </form>\r\n                    <button className='modal-close-btn modal-btn' onClick={() => this.props.closeModal()}>Close</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CustomButtonForm;","import React from 'react';\r\n\r\nfunction Display(props){\r\n    return(\r\n        <div className='display-container'>\r\n            <ResultDisplay result={props.currentResult}\r\n                contextClass='current-result' />\r\n            <div className='details-view'>\r\n                <ResultHistoryDisplay rollHistory={props.rollHistory}/>\r\n                <AddButton onClick={props.addButtonOnClick}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ResultHistoryDisplay(props){\r\n    let idx = -1;\r\n    const historyList = props.rollHistory.map((item) => {\r\n        idx++;\r\n        return (<li key={'history-' + idx}>\r\n            <ResultDisplay \r\n                result={item}\r\n                contextClass='historical-result' />\r\n            </li>);\r\n    });\r\n\r\n    return(\r\n        <div className='result-history'>\r\n            <ul id='result-history-list' className='result-history-list'>\r\n                {historyList}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ResultDisplay(props){\r\n    return(\r\n        <div className={'result-wrapper ' + props.contextClass}>\r\n            <h4 className='result-details'>{props.result.roll}</h4>\r\n            <p className='result-display'>{props.result.result}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction AddButton(props){\r\n    return(\r\n        <button className='addBtn' onClick={props.onClick}>Add Custom Roll</button>\r\n    );\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport UserInput from './components/UserInput';\r\nimport CustomButtonForm from './components/CustomButtonForm';\r\nimport Display from './components/Display'\r\nimport Modal from 'react-modal';\r\nimport './css/index.css';\r\n\r\nclass App extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currentResult: {roll: '', result: 0},\r\n            rollHistory: [],\r\n            customButtons: [],\r\n            modalIsOpen: false\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.scrollHistoryDown();\r\n    }\r\n\r\n    onClickDice(size){\r\n        const newRoll = {roll: `1d${size}`, result: this.roll(size)};\r\n        const newHistory = this.state.rollHistory.concat(newRoll)\r\n        this.setState({\r\n            currentResult: newRoll,\r\n            rollHistory: newHistory\r\n        });\r\n    }\r\n\r\n    roll = (n) => Math.floor(Math.random() * Math.floor(n)+1);\r\n\r\n    scrollHistoryDown(){\r\n        let historyDisplay = document.getElementById('result-history-list');\r\n\r\n        historyDisplay.scrollTop = historyDisplay.scrollHeight;\r\n    }\r\n\r\n    showAddButtonModal(){\r\n        this.setState({\r\n            modalIsOpen: true\r\n        })\r\n    }\r\n\r\n    closeModal(){\r\n        this.setState({\r\n            modalIsOpen: false\r\n        });\r\n    }\r\n\r\n    handleSubmit(event){\r\n        const newValue = parseInt(event.target.elements[0].value);\r\n        event.preventDefault();\r\n        if(Number.isInteger(newValue)){\r\n            const newCustomButtons = this.state.customButtons.concat([newValue]);\r\n            this.setState({\r\n                customButtons: newCustomButtons\r\n            });\r\n            this.closeModal();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const basicDice = [2,4,6,8,10,12,20,100];\r\n\r\n        return(\r\n            <div className='container'>\r\n                <Modal \r\n                    isOpen={this.state.modalIsOpen}\r\n                    onRequestClose={() => this.closeModal()}\r\n                >\r\n                    <CustomButtonForm closeModal={() => this.closeModal()}\r\n                        handleSubmit={(event) => this.handleSubmit(event)}/>\r\n                </Modal>\r\n                <UserInput onClick={(size) => this.onClickDice(size)} \r\n                    diceButtons={this.state.customButtons.length === 0 ?\r\n                    basicDice : basicDice.concat(this.state.customButtons)} />\r\n                <Display currentResult={this.state.currentResult} \r\n                    rollHistory={this.state.rollHistory}\r\n                    addButtonOnClick={() => this.showAddButtonModal()} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n/*****************************************/\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}