{"version":3,"sources":["scripts/Result.js","scripts/Roll.js","components/UserInput.js","components/CustomButtonForm.js","components/Display.js","index.js"],"names":["Result","roll","printDetail","detailStr","this","detail","rolls","forEach","item","add","slice","origin","total","rollBuffer","Roll","diceSize","numDice","postRollAdd","numRolls","name","basicRoll","result","newRollResult","Math","floor","random","push","fullRoll","repeat_roll","bind","num","func","toString","showNumDice","showNumRolls","showPostRollAdd","str","initDiceSize","parseInt","initNumDice","initPostRollAdd","initNumRolls","undefined","Number","isInteger","RollList","props","map","idx","RollButton","key","text","onClick","className","UserInput","FormRow","htmlFor","inputID","labelText","id","type","value","onChange","event","handleChange","CustomButtonForm","onSubmit","handleSubmit","currentRoll","handleFormChange","readOnly","closeModal","ResultHistoryDisplay","historyList","rollHistory","ResultDisplay","contextClass","rollStr","AddButton","Display","currentResult","addButtonOnClick","App","basicDice","createBasicDice","state","modalIsOpen","nextCustomRoll","scrollHistoryDown","rollsToAdd","newRoll","concat","newResult","console","log","newHistory","setState","historyDisplay","document","getElementById","scrollTop","scrollHeight","preventDefault","newRollList","newEmptyRoll","newVal","target","newCustomRoll","Object","assign","isOpen","onRequestClose","onClickDice","showAddButtonModal","React","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.d057da67.chunk.js","sourcesContent":["class Result{\r\n    constructor(roll){\r\n        this.origin = roll\r\n        this.total = 0;\r\n        this.detail = {rolls: [], add: 0, rollBuffer: []};\r\n    }\r\n\r\n    printDetail = function(){\r\n        let detailStr = \"\";\r\n        this.detail.rolls.forEach(item => {\r\n            detailStr += `(${item}${this.detail.add != 0 ? (\" +\" + this.detail['add']) : ''}), `;\r\n        });\r\n\r\n        return detailStr.slice(0,-2);\r\n    }\r\n}\r\n\r\nexport default Result;","import Result from './Result'\r\n\r\nclass Roll{\r\n    constructor(diceSize, numDice, postRollAdd, numRolls, name){\r\n        const initDiceSize = parseInt(diceSize);\r\n        const initNumDice = parseInt(numDice);\r\n        const initPostRollAdd = parseInt(postRollAdd);\r\n        const initNumRolls = parseInt(numRolls);\r\n\r\n        if(diceSize === undefined || !Number.isInteger(initDiceSize)){\r\n            this.diceSize = 20;\r\n        } else{\r\n            this.diceSize = parseInt(initDiceSize);\r\n        }\r\n        \r\n        if(numDice === undefined || !Number.isInteger(initNumDice)){\r\n            this.numDice = 1;\r\n        } else{\r\n            this.numDice = initNumDice;\r\n        }\r\n        \r\n        if(postRollAdd === undefined || !Number.isInteger(initPostRollAdd)){\r\n            this.postRollAdd = 0;\r\n        } else{\r\n            this.postRollAdd = initPostRollAdd;\r\n        }\r\n\r\n        if(numRolls === undefined || !Number.isInteger(initNumRolls)){\r\n            this.numRolls = 1;\r\n        } else{\r\n            this.numRolls = initNumRolls;\r\n        }\r\n\r\n        if(!(name === undefined)){\r\n            this.name= name;\r\n        }\r\n    }\r\n\r\n    basicRoll = function(result){\r\n        let newRollResult = Math.floor(Math.random() * Math.floor(this.diceSize)+1);\r\n        result.detail['rollBuffer'].push(newRollResult);\r\n        result.total += newRollResult;\r\n        return result\r\n    }\r\n\r\n    fullRoll  = function(result){\r\n        this.repeat_roll(this.numDice, this.basicRoll.bind(this), result);\r\n        result.total += this.postRollAdd;\r\n        result.detail['rolls'].push(result.detail['rollBuffer'].slice(0));\r\n        result.detail['rollBuffer'] = [];\r\n        return result;\r\n    }\r\n\r\n    repeat_roll  = function(num, func, result){\r\n        func(result);\r\n        num--;\r\n\r\n        if(num > 0){\r\n            this.repeat_roll(num, func, result);\r\n            return result;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    roll  = function(){\r\n        let result = new Result(this);\r\n        this.repeat_roll(this.numRolls, this.fullRoll.bind(this), result);\r\n        result.detail['add'] = this.postRollAdd;\r\n        return result;\r\n    }\r\n\r\n    toString  = function(){\r\n        const showNumDice = (this.numDice != 1);\r\n        const showNumRolls = (this.numRolls != 1);\r\n        const showPostRollAdd = (this.postRollAdd != 0);\r\n\r\n        let str = `d${this.diceSize}`;\r\n        str += showPostRollAdd ? `+${this.postRollAdd}` : '';\r\n        if(showNumDice){str = this.numDice+str};\r\n        if(showNumRolls){\r\n            str = `${this.numRolls}[${str}]`;\r\n        }\r\n\r\n        return str;\r\n    }\r\n    \r\n}\r\n\r\nexport default Roll;","import React from 'react';\r\nimport Roll from '../scripts/Roll'\r\n\r\nfunction UserInput(props){\r\n    return(\r\n            <div className='input-container'>\r\n                <RollList rolls={props.rolls} \r\n                    onClick={(roll) => props.onClick(roll)} />\r\n            </div>\r\n        );\r\n}\r\n\r\nfunction RollList(props){\r\n    const diceButtons = props.rolls.map((roll, idx) => {\r\n        return <RollButton \r\n                key={`roller-${roll.toString()}__${idx}`}\r\n                text={roll.name === undefined ? roll.toString() : roll.name}\r\n                onClick={() => props.onClick(roll)}/>\r\n    });\r\n\r\n    return diceButtons;\r\n}\r\n\r\nfunction RollButton(props){\r\n    return(\r\n        <button className='rollBtn' \r\n            onClick={props.onClick}>{props.text}</button>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default UserInput;","import React from 'react';\r\nimport Roll from '../scripts/Roll';\r\n\r\nfunction CustomButtonForm(props){\r\n    return(\r\n        <div className='modal-content'>\r\n            <div className='form-heading'>\r\n                <h3>Add a custom Dice</h3>\r\n                <p>Please enter custom dice size</p>\r\n                <small>(Number values only)</small>\r\n            </div>\r\n            <div className='modal-input-container'>\r\n                <form className='custom-btn-form' onSubmit={props.handleSubmit}>\r\n                    {/* dice size */}\r\n                    <FormRow inputID='diceSize'\r\n                        labelText='Dice Size (dX)' \r\n                        value={props.currentRoll.diceSize}\r\n                        handleChange={(event) => props.handleFormChange(event)} />\r\n                    {/* number of dice */}\r\n                    <FormRow inputID='numDice'\r\n                        labelText='Number of Dice' \r\n                        value={props.currentRoll.numDice}\r\n                        handleChange={(event) => props.handleFormChange(event)} />\r\n                    {/* modifier to roll result */}\r\n                    <FormRow inputID='postRollAdd'\r\n                        labelText='Modifier to roll result' \r\n                        value={props.currentRoll.postRollAdd}\r\n                        handleChange={(event) => props.handleFormChange(event)} />\r\n                    {/* number of rolls */}\r\n                    <FormRow inputID='numRolls'\r\n                        labelText='How many times to perform Roll?' \r\n                        value={props.currentRoll.numRolls}\r\n                        handleChange={(event) => props.handleFormChange(event)} />\r\n                    <FormRow inputID='name' \r\n                        labelText='Name for your custom roll'\r\n                        value={props.currentRoll.name}\r\n                        handleChange={(event) => props.handleFormChange(event)}/>\r\n                    <div className='input-row'>\r\n                        <label htmlFor='' className='input-label'>Your Custom Roll</label>\r\n                        <input type='text' \r\n                            value={props.currentRoll.toString()}\r\n                            readOnly />\r\n                    </div>\r\n                    <div className='input-row'>\r\n                        <input id='input-submit' className='input-submit modal-btn' type='submit' name='input-submit' value='Submit' />\r\n                    </div>\r\n                    <div className='input-row'>\r\n                        <button className='modal-close-btn modal-btn' onClick={() => props.closeModal()}>Close</button>\r\n                    </div>\r\n                </form>\r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction FormRow(props){\r\n    return(\r\n        <div className='input-row'>\r\n            <label htmlFor={props.inputID} className={`label-${props.inputID} input-label`}>\r\n                {props.labelText}\r\n            </label>\r\n            <input id={`input-${props.inputID}`} className='input-text' \r\n            type='text' name={props.inputID}\r\n            value={props.value} \r\n            onChange={(event) => props.handleChange(event)} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomButtonForm;","import React from 'react';\r\n\r\nfunction Display(props){\r\n    return(\r\n        <div className='display-container'>\r\n            <ResultDisplay result={props.currentResult}\r\n                contextClass='current-result' />\r\n            <div className='details-view'>\r\n                <ResultHistoryDisplay rollHistory={props.rollHistory}/>\r\n                <AddButton onClick={props.addButtonOnClick}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ResultHistoryDisplay(props){\r\n    let idx = -1;\r\n    const historyList = props.rollHistory.map((item) => {\r\n        idx++;\r\n        return (<li key={'history-' + idx}>\r\n            <ResultDisplay \r\n                result={item}\r\n                contextClass='historical-result' />\r\n            </li>);\r\n    });\r\n\r\n    return(\r\n        <div className='result-history'>\r\n            <ul id='result-history-list' className='result-history-list'>\r\n                {historyList}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ResultDisplay(props){\r\n    const rollStr = props.result.origin === undefined ? \"\" : props.result.origin.toString();\r\n    const detailStr = props.result.detail === undefined ? \"\" : props.result.printDetail();\r\n\r\n    return(\r\n        <div className={'result-wrapper ' + props.contextClass}>\r\n            <h4 className='result-header'>{rollStr}</h4>\r\n            <p className='result-details'>{detailStr}</p>\r\n            <p className='result-display'>{props.result.total}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction AddButton(props){\r\n    return(\r\n        <button className='addBtn' onClick={props.onClick}>Add Custom Roll</button>\r\n    );\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport UserInput from './components/UserInput';\r\nimport CustomButtonForm from './components/CustomButtonForm';\r\nimport Display from './components/Display'\r\nimport Modal from 'react-modal';\r\nimport Roll from './scripts/Roll';\r\n\r\nimport '../node_modules/normalize.css/normalize.css';\r\nimport './css/index.css';\r\n\r\nclass App extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        const basicDice = this.createBasicDice();\r\n        this.state = {\r\n            currentResult: {},\r\n            rolls: basicDice,\r\n            rollHistory: [],\r\n            modalIsOpen: false,\r\n            nextCustomRoll: new Roll()\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.scrollHistoryDown();\r\n    }\r\n\r\n    createBasicDice(){\r\n        const basicDice = [2,4,6,8,10,12,20,100];\r\n        let rollsToAdd = [];\r\n\r\n        basicDice.forEach(item => {\r\n            const newRoll = new Roll(item);\r\n            rollsToAdd = rollsToAdd.concat(newRoll);\r\n        });\r\n\r\n        return rollsToAdd;\r\n    }\r\n\r\n    onClickDice(roll){\r\n        const newResult = roll.roll();\r\n        console.log(newResult);\r\n        const newHistory = this.state.rollHistory.concat(newResult)\r\n        this.setState({\r\n            currentResult: newResult,\r\n            rollHistory: newHistory\r\n        });\r\n    }\r\n\r\n    scrollHistoryDown(){\r\n        let historyDisplay = document.getElementById('result-history-list');\r\n\r\n        historyDisplay.scrollTop = historyDisplay.scrollHeight;\r\n    }\r\n\r\n    showAddButtonModal(){\r\n        this.setState({\r\n            modalIsOpen: true\r\n        })\r\n    }\r\n\r\n    closeModal(){\r\n        this.setState({\r\n            modalIsOpen: false\r\n        });\r\n    }\r\n\r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n        const newRollList = this.state.rolls.concat(this.state.nextCustomRoll)\r\n        const newEmptyRoll = new Roll()\r\n        this.setState({\r\n            rolls: newRollList,\r\n            nextCustomRoll: newEmptyRoll\r\n        });\r\n\r\n        this.closeModal();\r\n    }\r\n\r\n    handleFormChange(event){\r\n        let newVal;\r\n        if(event.target.name === 'name'){\r\n            newVal = event.target.value\r\n            const newCustomRoll = Object.assign({}, this.state.nextCustomRoll, {[event.target.name]: newVal});\r\n                this.setState({\r\n                    nextCustomRoll: newCustomRoll\r\n                });\r\n        } else{\r\n            newVal = parseInt(event.target.value);\r\n            if(Number.isInteger(newVal)){\r\n                const newCustomRoll = Object.assign({}, this.state.nextCustomRoll, {[event.target.name]: newVal});\r\n                this.setState({\r\n                    nextCustomRoll: newCustomRoll\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className='container'>\r\n                <Modal \r\n                    isOpen={this.state.modalIsOpen}\r\n                    onRequestClose={() => this.closeModal()}\r\n                >\r\n                    <CustomButtonForm closeModal={() => this.closeModal()}\r\n                        handleFormChange={event => this.handleFormChange(event)}\r\n                        handleSubmit={(event) => this.handleSubmit(event)}\r\n                        currentRoll={this.state.nextCustomRoll}/>\r\n                </Modal>\r\n                <UserInput onClick={(roll) => this.onClickDice(roll)} \r\n                    rolls={this.state.rolls} />\r\n                <Display currentResult={this.state.currentResult} \r\n                    rollHistory={this.state.rollHistory}\r\n                    addButtonOnClick={() => this.showAddButtonModal()} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n/*****************************************/\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}