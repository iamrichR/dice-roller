{"version":3,"sources":["components/UserInput.js","components/CustomButtonForm.js","components/Display.js","scripts/Result.js","scripts/Roll.js","index.js"],"names":["RollList","props","rolls","map","roll","idx","RollButton","key","toString","text","undefined","name","onClick","className","UserInput","FormRow","htmlFor","inputID","labelText","id","type","value","onChange","event","handleChange","CustomButtonForm","onSubmit","handleSubmit","currentRoll","diceSize","handleFormChange","numDice","postRollAdd","numRolls","readOnly","closeModal","ResultHistoryDisplay","historyList","rollHistory","item","ResultDisplay","result","contextClass","rollStr","origin","detailStr","detail","printDetail","total","AddButton","Display","currentResult","addButtonOnClick","Result","this","forEach","add","slice","rollBuffer","Roll","basicRoll","newRollResult","Math","floor","random","push","fullRoll","repeat_roll","bind","num","func","showNumDice","showNumRolls","showPostRollAdd","str","initDiceSize","parseInt","initNumDice","initPostRollAdd","initNumRolls","Number","isInteger","App","basicDice","createBasicDice","state","modalIsOpen","nextCustomRoll","scrollHistoryDown","rollsToAdd","newRoll","concat","newResult","console","log","newHistory","setState","historyDisplay","document","getElementById","scrollTop","scrollHeight","preventDefault","newRollList","newEmptyRoll","newVal","target","newCustomRoll","Object","assign","isOpen","onRequestClose","onClickDice","showAddButtonModal","React","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.0e46899d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction UserInput(props){\r\n    return(\r\n            <div className='input-container'>\r\n                <RollList rolls={props.rolls} \r\n                    onClick={(roll) => props.onClick(roll)} />\r\n            </div>\r\n        );\r\n}\r\n\r\nfunction RollList(props){\r\n    const diceButtons = props.rolls.map((roll, idx) => {\r\n        return <RollButton \r\n                key={`roller-${roll.toString()}__${idx}`}\r\n                text={roll.name === undefined ? roll.toString() : roll.name}\r\n                onClick={() => props.onClick(roll)}/>\r\n    });\r\n\r\n    return diceButtons;\r\n}\r\n\r\nfunction RollButton(props){\r\n    return(\r\n        <button className='rollBtn' \r\n            onClick={props.onClick}>{props.text}</button>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default UserInput;","import React from 'react';\r\n\r\nfunction CustomButtonForm(props){\r\n    return(\r\n        <div className='modal-content'>\r\n            <div className='form-heading'>\r\n                <h3>Add a custom Dice</h3>\r\n                <p>Please enter custom dice size</p>\r\n                <small>(Number values only)</small>\r\n            </div>\r\n            <div className='modal-input-container'>\r\n                <form className='custom-btn-form' onSubmit={props.handleSubmit}>\r\n                    {/* dice size */}\r\n                    <FormRow inputID='diceSize'\r\n                        labelText='Dice Size (dX)' \r\n                        value={props.currentRoll.diceSize}\r\n                        handleChange={(event) => props.handleFormChange(event)} />\r\n                    {/* number of dice */}\r\n                    <FormRow inputID='numDice'\r\n                        labelText='Number of Dice' \r\n                        value={props.currentRoll.numDice}\r\n                        handleChange={(event) => props.handleFormChange(event)} />\r\n                    {/* modifier to roll result */}\r\n                    <FormRow inputID='postRollAdd'\r\n                        labelText='Modifier to roll result' \r\n                        value={props.currentRoll.postRollAdd}\r\n                        handleChange={(event) => props.handleFormChange(event)} />\r\n                    {/* number of rolls */}\r\n                    <FormRow inputID='numRolls'\r\n                        labelText='How many times to perform Roll?' \r\n                        value={props.currentRoll.numRolls}\r\n                        handleChange={(event) => props.handleFormChange(event)} />\r\n                    <FormRow inputID='name' \r\n                        labelText='Name for your custom roll'\r\n                        value={props.currentRoll.name}\r\n                        handleChange={(event) => props.handleFormChange(event)}/>\r\n                    <div className='input-row'>\r\n                        <label htmlFor='' className='input-label'>Your Custom Roll</label>\r\n                        <input type='text' \r\n                            value={props.currentRoll.toString()}\r\n                            readOnly />\r\n                    </div>\r\n                    <div className='input-row'>\r\n                        <input id='input-submit' className='input-submit modal-btn' type='submit' name='input-submit' value='Submit' />\r\n                    </div>\r\n                    <div className='input-row'>\r\n                        <button className='modal-close-btn modal-btn' onClick={() => props.closeModal()}>Close</button>\r\n                    </div>\r\n                </form>\r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction FormRow(props){\r\n    return(\r\n        <div className='input-row'>\r\n            <label htmlFor={props.inputID} className={`label-${props.inputID} input-label`}>\r\n                {props.labelText}\r\n            </label>\r\n            <input id={`input-${props.inputID}`} className='input-text' \r\n            type='text' name={props.inputID}\r\n            value={props.value} \r\n            onChange={(event) => props.handleChange(event)} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomButtonForm;","import React from 'react';\r\n\r\nfunction Display(props){\r\n    return(\r\n        <div className='display-container'>\r\n            <ResultDisplay result={props.currentResult}\r\n                contextClass='current-result' />\r\n            <div className='details-view'>\r\n                <ResultHistoryDisplay rollHistory={props.rollHistory}/>\r\n                <AddButton onClick={props.addButtonOnClick}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ResultHistoryDisplay(props){\r\n    let idx = -1;\r\n    const historyList = props.rollHistory.map((item) => {\r\n        idx++;\r\n        return (<li key={'history-' + idx}>\r\n            <ResultDisplay \r\n                result={item}\r\n                contextClass='historical-result' />\r\n            </li>);\r\n    });\r\n\r\n    return(\r\n        <div className='result-history'>\r\n            <ul id='result-history-list' className='result-history-list'>\r\n                {historyList}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ResultDisplay(props){\r\n    const rollStr = props.result.origin === undefined ? \"\" : props.result.origin.toString();\r\n    const detailStr = props.result.detail === undefined ? \"\" : props.result.printDetail();\r\n\r\n    return(\r\n        <div className={'result-wrapper ' + props.contextClass}>\r\n            <h4 className='result-header'>{rollStr}</h4>\r\n            <p className='result-details'>{detailStr}</p>\r\n            <p className='result-display'>{props.result.total}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction AddButton(props){\r\n    return(\r\n        <button className='addBtn' onClick={props.onClick}>Add Custom Roll</button>\r\n    );\r\n}\r\n\r\nexport default Display;","class Result{\r\n    constructor(roll){\r\n        this.origin = roll\r\n        this.total = 0;\r\n        this.detail = {rolls: [], add: 0, rollBuffer: []};\r\n    }\r\n\r\n    printDetail = function(){\r\n        let detailStr = \"\";\r\n        this.detail.rolls.forEach(item => {\r\n            detailStr += `(${item}${this.detail.add !== 0 ? (\" +\" + this.detail['add']) : ''}), `;\r\n        });\r\n\r\n        return detailStr.slice(0,-2);\r\n    }\r\n}\r\n\r\nexport default Result;","import Result from './Result'\r\n\r\nclass Roll{\r\n    constructor(diceSize, numDice, postRollAdd, numRolls, name){\r\n        const initDiceSize = parseInt(diceSize);\r\n        const initNumDice = parseInt(numDice);\r\n        const initPostRollAdd = parseInt(postRollAdd);\r\n        const initNumRolls = parseInt(numRolls);\r\n\r\n        if(diceSize === undefined || !Number.isInteger(initDiceSize)){\r\n            this.diceSize = 20;\r\n        } else{\r\n            this.diceSize = parseInt(initDiceSize);\r\n        }\r\n        \r\n        if(numDice === undefined || !Number.isInteger(initNumDice)){\r\n            this.numDice = 1;\r\n        } else{\r\n            this.numDice = initNumDice;\r\n        }\r\n        \r\n        if(postRollAdd === undefined || !Number.isInteger(initPostRollAdd)){\r\n            this.postRollAdd = 0;\r\n        } else{\r\n            this.postRollAdd = initPostRollAdd;\r\n        }\r\n\r\n        if(numRolls === undefined || !Number.isInteger(initNumRolls)){\r\n            this.numRolls = 1;\r\n        } else{\r\n            this.numRolls = initNumRolls;\r\n        }\r\n\r\n        if(!(name === undefined)){\r\n            this.name= name;\r\n        }\r\n    }\r\n\r\n    basicRoll = function(result){\r\n        let newRollResult = Math.floor(Math.random() * Math.floor(this.diceSize)+1);\r\n        result.detail['rollBuffer'].push(newRollResult);\r\n        result.total += newRollResult;\r\n        return result\r\n    }\r\n\r\n    fullRoll  = function(result){\r\n        this.repeat_roll(this.numDice, this.basicRoll.bind(this), result);\r\n        result.total += this.postRollAdd;\r\n        result.detail['rolls'].push(result.detail['rollBuffer'].slice(0));\r\n        result.detail['rollBuffer'] = [];\r\n        return result;\r\n    }\r\n\r\n    repeat_roll  = function(num, func, result){\r\n        func(result);\r\n        num--;\r\n\r\n        if(num > 0){\r\n            this.repeat_roll(num, func, result);\r\n            return result;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    roll  = function(){\r\n        let result = new Result(this);\r\n        this.repeat_roll(this.numRolls, this.fullRoll.bind(this), result);\r\n        result.detail['add'] = this.postRollAdd;\r\n        return result;\r\n    }\r\n\r\n    toString  = function(){\r\n        const showNumDice = (this.numDice !== 1);\r\n        const showNumRolls = (this.numRolls !== 1);\r\n        const showPostRollAdd = (this.postRollAdd !== 0);\r\n\r\n        let str = `d${this.diceSize}`;\r\n        str += showPostRollAdd ? `+${this.postRollAdd}` : '';\r\n        if(showNumDice){str = this.numDice+str};\r\n        if(showNumRolls){\r\n            str = `${this.numRolls}[${str}]`;\r\n        }\r\n\r\n        return str;\r\n    }\r\n    \r\n}\r\n\r\nexport default Roll;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport UserInput from './components/UserInput';\r\nimport CustomButtonForm from './components/CustomButtonForm';\r\nimport Display from './components/Display'\r\nimport Modal from 'react-modal';\r\nimport Roll from './scripts/Roll';\r\n\r\nimport '../node_modules/normalize.css/normalize.css';\r\nimport './css/index.css';\r\n\r\nclass App extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        const basicDice = this.createBasicDice();\r\n        this.state = {\r\n            currentResult: {},\r\n            rolls: basicDice,\r\n            rollHistory: [],\r\n            modalIsOpen: false,\r\n            nextCustomRoll: new Roll()\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.scrollHistoryDown();\r\n    }\r\n\r\n    createBasicDice(){\r\n        const basicDice = [2,4,6,8,10,12,20,100];\r\n        let rollsToAdd = [];\r\n\r\n        basicDice.forEach(item => {\r\n            const newRoll = new Roll(item);\r\n            rollsToAdd = rollsToAdd.concat(newRoll);\r\n        });\r\n\r\n        return rollsToAdd;\r\n    }\r\n\r\n    onClickDice(roll){\r\n        const newResult = roll.roll();\r\n        console.log(newResult);\r\n        const newHistory = this.state.rollHistory.concat(newResult)\r\n        this.setState({\r\n            currentResult: newResult,\r\n            rollHistory: newHistory\r\n        });\r\n    }\r\n\r\n    scrollHistoryDown(){\r\n        let historyDisplay = document.getElementById('result-history-list');\r\n\r\n        historyDisplay.scrollTop = historyDisplay.scrollHeight;\r\n    }\r\n\r\n    showAddButtonModal(){\r\n        this.setState({\r\n            modalIsOpen: true\r\n        })\r\n    }\r\n\r\n    closeModal(){\r\n        this.setState({\r\n            modalIsOpen: false\r\n        });\r\n    }\r\n\r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n        const newRollList = this.state.rolls.concat(this.state.nextCustomRoll)\r\n        const newEmptyRoll = new Roll()\r\n        this.setState({\r\n            rolls: newRollList,\r\n            nextCustomRoll: newEmptyRoll\r\n        });\r\n\r\n        this.closeModal();\r\n    }\r\n\r\n    handleFormChange(event){\r\n        let newVal;\r\n        if(event.target.name === 'name'){\r\n            newVal = event.target.value\r\n            const newCustomRoll = Object.assign({}, this.state.nextCustomRoll, {[event.target.name]: newVal});\r\n                this.setState({\r\n                    nextCustomRoll: newCustomRoll\r\n                });\r\n        } else{\r\n            newVal = parseInt(event.target.value);\r\n            if(Number.isInteger(newVal)){\r\n                const newCustomRoll = Object.assign({}, this.state.nextCustomRoll, {[event.target.name]: newVal});\r\n                this.setState({\r\n                    nextCustomRoll: newCustomRoll\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className='container'>\r\n                <Modal \r\n                    isOpen={this.state.modalIsOpen}\r\n                    onRequestClose={() => this.closeModal()}\r\n                >\r\n                    <CustomButtonForm closeModal={() => this.closeModal()}\r\n                        handleFormChange={event => this.handleFormChange(event)}\r\n                        handleSubmit={(event) => this.handleSubmit(event)}\r\n                        currentRoll={this.state.nextCustomRoll}/>\r\n                </Modal>\r\n                <UserInput onClick={(roll) => this.onClickDice(roll)} \r\n                    rolls={this.state.rolls} />\r\n                <Display currentResult={this.state.currentResult} \r\n                    rollHistory={this.state.rollHistory}\r\n                    addButtonOnClick={() => this.showAddButtonModal()} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n/*****************************************/\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}